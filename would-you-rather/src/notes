 // handling tab event
    handleOpenTab = (event, tabName) => {

        // variable declarations
        let i;
        let tabcontent;
        let tablinks;

        tabcontent = document.getElementsByClassName("tabcontent")
        for (i=0; i < tabcontent.length; i++) {
            tabcontent[i].style.display="none"
        }

        tablinks = document.getElementsByClassName("tablinks")
        for (i=0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "") 
        }

        document.getElementById(tabName).style.display="block"
        event.currentTarget.className += " active"
    }




<div className="tab">
                    <button className="tablinks" onClick={(event) => {this.handleOpenTab(event, 'unanswered')}}>Unanswered questions</button>
                    <button className="tablinks" onClick={(event) => {this.handleOpenTab(event, 'answered')}}>Answered Questions</button>
                </div>
                <div id="unanswered" className="tabcontent">
                    <ul className="user-card">
                        {unanswered.map((question, index) => {
                            if(question.optionOne.votes.includes(authedUser) === false) {
                                return (
                                    <div key={question.id}>
                                        <UserCard key={index} 
                                                  question={question} 
                                                  option={question.optionOne} 
                                                  users={users}
                                        />
                                    </div>
                                )
                            }
                            return true
                        })}
                    </ul>
                </div>
                <div id="answered" className="tabcontent">
                    <ul className="user-card">
                        {answered.map((question, index) => {
                            if(question.optionOne.votes.includes(authedUser) === false) {
                                return (
                                    <div key={question.id}>
                                        <UserCard key={index}
                                                  question={question}
                                                  option={question.optionOne}
                                                  users={users}
                                        />          
                                    </div>
                                )
                            }
                        })}
                    </ul>
                </div>
            </div>
            